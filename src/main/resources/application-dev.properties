#server.port=9001

spring.application.name=dev empCrud

output.message=This is Dev Profile For Application ${spring.application.name}

import FileUploadOutlinedIcon from "@mui/icons-material/FileUploadOutlined";
import { Box, ButtonBase } from "@mui/material";
import { ReactNode, useState } from "react";
import Text from "../Text";
import { VisuallyHiddenInput } from "../VisuallyHiddenInput";

type DropZoneProps<T extends boolean> = {
  backgroundColor?: string;
  label?: string;
  content: string;
  height?: string | number;
  width?: string | number;
  uploadIcon?: ReactNode;
  solidBorder?: boolean;
  value?: string;
  onClick?: (file: FileList | null) => void;
  multiple?: T;
  labelComponent?: ReactNode;
  error?: string | boolean;
  accept?: string;
};

const DropZone = <T extends boolean>({
  value,
  onClick,
  label,
  content,
  height = "100%",
  width = "100%",
  labelComponent,
  uploadIcon,
  backgroundColor,
  solidBorder,
  multiple,
  error,
  accept = ".jpg,.jpeg,.png,.svg",
}: DropZoneProps<T>) => {
  const [previewFiles, setPreviewFiles] =
    useState<{ name: string; avatar: string }[]>();

  const handleFileChange = (file: File) => {
    return new Promise<string>((resolve) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        resolve(reader.result as string);
      };
      reader.readAsDataURL(file);
    });
  };

  const handleFiles = async (file: File | null) => {
    if (!file) return;

    const previews = await handleFileChange(file);

    setPreviewFiles([
      {
        name: file.name,
        avatar: previews,
      },
    ]);
  };

  const isPreviewVisible = previewFiles && previewFiles?.length > 0;

  return (
    <Box width={"100%"}>
      {labelComponent && <Box mb={"10px"}>{labelComponent}</Box>}

      {label && !labelComponent && (
        <Text mb={"10px"} fontWeight={"medium"}>
          {label}
        </Text>
      )}
      <ButtonBase
        sx={{
          bgcolor: backgroundColor,
          height: height,
          width: width,
          border: `1px ${solidBorder ? "solid" : "dashed"} ${
            error ? "red" : "#1A1A1A66"
          }`,
          justifyContent: "center",
          alignItems: "center",
          flexDirection: "column",
          borderRadius: 2.5,
        }}
        component="label"
      >
        {!isPreviewVisible &&
          !value &&
          (uploadIcon ?? (
            <FileUploadOutlinedIcon sx={{ fontSize: "5em", opacity: "0.4" }} />
          ))}

        <VisuallyHiddenInput
          multiple={multiple}
          onChange={(e) => {
            const file = e.target.files?.item?.(0);
            if (file) handleFiles(file);

            onClick?.(e?.target?.files);
          }}
          type="file"
          accept={accept}
        />
        <Text color={"primary.main"} px={4} textAlign={"center"}>
          {/* show preview file names after upload file */}
          {previewFiles?.map((it) => (
            <Box>
              {accept !== ".csv" && (
                <img
                  src={it?.avatar}
                  height={"60px"}
                  width={"60px"}
                  alt={`${it?.name ?? ""} - image`}
                />
              )}

              <Text>{it?.name}</Text>
            </Box>
          ))}

          {!isPreviewVisible && value && accept !== ".csv" && (
            <Box>
              <img src={value} height={"60px"} width={"60px"} />
            </Box>
          )}

          {value && accept === ".csv" && value}

          {!isPreviewVisible && !value && content}
        </Text>
      </ButtonBase>
      {!!error && (
        <Text variant="caption" color={"error"}>
          {error}
        </Text>
      )}
    </Box>
  );
};

export default DropZone;

